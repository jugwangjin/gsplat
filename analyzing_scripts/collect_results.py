import os
import subprocess


BASE_COMMAND = "python student_trainer.py distillation --teacher_ckpt ../gsplat_teachers/bicycle_4/ckpts/ckpt_29999_rank0.pt --data_factor 4 --data_dir data/360_v2/bicycle/ --disable_viewer --strategy.refine_start_iter 20000 --strategy.refine_start_iter 500 --strategy.refine_stop_iter 3000 "
STUDENT_DIR = "../gsplat_students"

def main():
    options = {'reinit': 'disable_depth_reinit',
               'weight': 'apply_vis_on_teacher_sampling',
               'depth': 'depth_lambda',
                'sampling': 'teacher_sampling_ratio'
               }
# # --reset_every 1000
#     possible_values = {
#         'reinit': [True, False],
#         'weight': [True, False],
#         'disable_pruning': [True, False],
#         'depth': [0, 0.1],
#         'sampling': [0.05],
#         # 'sampling': [0.1, 0.05]
#     }


# --reset_every 1000
    possible_values = {
        'reinit': [False],
        'weight': [True],
        'disable_pruning': [False, True],
        'depth': [0.1, 0],
        'sampling': [0.05],
        # 'sampling': [0.1, 0.05]
    }


    BASIC_output_dir_name = 'bicycle_4'

    commands = []
    output_dirs = []
    options = []
    # make combinations
    for reinit in possible_values['reinit']:
        for weight in possible_values['weight']:
            for depth in possible_values['depth']:
                for sampling in possible_values['sampling']:
                    for disable_pruning in possible_values['disable_pruning']:
                        output_dir_name = BASIC_output_dir_name
                        command = BASE_COMMAND
                        if reinit:
                            command += ' --disable_depth_reinit'
                            output_dir_name += '_reinit'
                        if weight:
                            command += ' --apply_vis_on_teacher_sampling'
                            output_dir_name += '_weight'
                        
                        command += ' --depth_lambda {}'.format(depth)
                        # if depth > 0:
                        output_dir_name += '_{}'.format(depth)
                        
                        command += ' --teacher_sampling_ratio {}'.format(sampling)
                        output_dir_name += '_sampling_{}'.format(sampling)

                        if disable_pruning:
                            command += ' --strategy.disable_pruning'
                            output_dir_name += '_disable_pruning'
                        else:
                            output_dir_name += '_with_pruining'

                        command += ' --result_dir {}'.format(output_dir)


                        output_dir = os.path.join(STUDENT_DIR, output_dir_name)
                        # print(command)
                        commands.append(command)
                        output_dirs.append(output_dir)
                        options.append({'reinit': reinit, 'weight': weight, 'depth': depth, 'sampling': sampling, 'disable_pruning': disable_pruning})

    print(len(commands))
    # exit()

    grads = ['0008', '0010', '0012']
    for grad in grads:
        command = f"python kd_trainer.py default --data_factor 4 --data_dir data/360_v2/bicycle/ --result_dir ../gsplat_students/bicycle_4_default_{grad} --disable_viewer --strategy.refine_start_iter 20000 --strategy.refine_start_iter 500 --strategy.refine_stop_iter 3000 --strategy.grow_grad2d 0.{grad}"
        subprocess.run(command, shell=True)

    # there are two formats of output dirs.
    # first: the ones generated by the above loop
    # second: the ones generated by the above loop
    # instead of using the saved list of options, let's parse the output dirs to get the options

    BASE_OUTPUT_DIR = '../gsplat_students'

    import csv
    import json
    with open('collected_results.csv', 'w') as f:
        fieldnames = ['reinit', 'weight', 'depth', 'sampling', 'disable_pruning', 'strategy', 'psnr', 'ssim', 'lpips', 'ellipse_time', 'num_GS']
        writer = csv.DictWriter(f, fieldnames=fieldnames)

        writer.writeheader()

        for dir in os.listdir(BASE_OUTPUT_DIR):
            if 'default' in dir:
                reinit = False
                weight = False
                depth = 0
                sampling = 0
                disable_pruning = False
                strategy = 'default_{}'.format(dir.split('_')[-1])

            else:
                if 'bicycle_4' in dir:
                    reinit = '_reinit' in dir
                    weight = '_weight' in dir
                    # depth: float before _sampling_
                    depth = dir.split('_sampling')[0].split('_')[-1]
                    # sampling: float after _sampling_
                    sampling = dir.split('_sampling_')[-1].split('_')[0]

                    disable_pruning = '_disable_pruning' in dir 
                    strategy = 'distillation'

                result_file = os.path.join(BASE_OUTPUT_DIR, dir, 'stats/val_step4999.json')
                with open(result_file, 'r') as f:
                    result = json.load(f)
                    result['reinit'] = reinit
                    result['weight'] = weight
                    result['depth'] = depth
                    result['sampling'] = sampling
                    result['disable_pruning'] = disable_pruning
                    result['strategy'] = strategy
                    writer.writerow(result)

    return


if __name__ == "__main__":
    main()